{%- liquid
  assign variants_available_arr = product.variants | map: 'available'
  assign variants_option1_arr = product.variants | map: 'option1'
  assign variants_option2_arr = product.variants | map: 'option2'
  assign variants_option3_arr = product.variants | map: 'option3'

  assign product_form_id = 'product-form-' | append: section.id
-%}

<variant-radios
  class="no-js-hidden flex flex-col gap-4"
  data-section="{{ section.id }}"
  data-url="{{ product.url }}"
  {{ block.shopify_attributes }}>

  {%- for option in product.options_with_values -%}


    <fieldset class="flex gap-4 items-center js product-form__input">
      <h5 class="">{{ option.name }}:</h5>
      <div class="flex items-center gap-4">

        {% if option.name == 'Pasek' %}
          <select
            id="{{ section.id }}-{{ option.position }}-select"
            class="product-form__variantSelect variant-select-input"
            name="{{ option.name }}"
            form="{{ product_form_id }}">
            {%- for value in option.values -%}

              {%- liquid
                assign option_disabled = true

                for option1_name in variants_option1_arr
                  case option.position
                    when 1
                      if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                        assign option_disabled = false
                      endif
                    when 2
                      if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                        assign option_disabled = false
                      endif
                    when 3
                      if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                        assign option_disabled = false
                      endif
                  endcase
                endfor
              -%}

              <option
                value="{{ value | escape }}"
                {% if option.selected_value == value %}
                selected{% endif %}
                {% if option_disabled %}
                disabled{% endif %}>
                {{ value }}
                {% if option_disabled %}
                  -  NiedostÄ™pny
                {% endif %}
              </option>
            {%- endfor -%}
          </select>
        {% else %}

          {%- for value in option.values -%}

            {%- liquid
              assign option_disabled = true

              for option1_name in variants_option1_arr
                case option.position
                  when 1
                    if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                      assign option_disabled = false
                    endif
                  when 2
                    if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                      assign option_disabled = false
                    endif
                  when 3
                    if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                      assign option_disabled = false
                    endif
                endcase
              endfor
            -%}
            {% unless option_disabled %}
              <div>
                <input
                  type="radio"
                  id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
                  name="{{ option.name }}"
                  value="{{ value | escape }}"
                  form="{{ product_form_id }}"
                  class="sr-only peer variant-color-input"
                  {% if option.selected_value == value %}
                  checked{% endif %}>
                <label for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}" class=" {{value | downcase}} block cursor-pointer rounded-full w-7 h-7 hover:scale-110 hover:brightness-110 hover:shadow-md active:scale-100  transition"></label>
              </div>
            {% endunless %}

          {%- endfor -%}
        {% endif %}
      </div>
    </fieldset>
  {%- endfor -%}
  <script type="application/json">
    {{ product.variants | json }}
  </script>
</variant-radios>

<script>
  	class VariantSelects extends HTMLElement {
  		constructor() {
  			super();
  			this.addEventListener('change', this.onVariantChange);
  				
  		}
  	
  		onVariantChange() {
  			this.updateOptions();
  			this.updateMasterId();
  			this.toggleAddButton(true, '', false);
  			this.updatePickupAvailability();
  			this.removeErrorMessage();
  	
  			if (!this.currentVariant) {
  				this.toggleAddButton(true, '', true);
  			} else {
  				// this.updateMedia();
  				this.setUnavailable();
  				this.updateURL();
  				this.updateVariantInput();
  				this.renderProductInfo();
  				this.updateShareUrl();
  			}

  			// Swiper update 
  			if (this.currentVariant && this.currentVariant.featured_media) {
  					// Since the featured media ID is a property of the variant, we'll use this to update the slider.
  					const newImageId = this.currentVariant.featured_media.id;
  					this.updateSwiperSlide(newImageId);
  				}
  		}

  		updateSwiperSlide(newImageId) {
  			const swiperSlides = document.querySelectorAll(".swiper .swiper-slide");
  			const newIndex = Array.from(swiperSlides).findIndex(
  				(slide) => slide.dataset.imageId === newImageId.toString()
  			);

  			if (newIndex !== -1) {
  				// Assuming window.swiper2 is the main Swiper instance
  				window.swiper.slideToLoop(newIndex);
  			}
  }
  	
  		updateOptions() {  
    		let selects = Array.from(this.querySelectorAll('select'), (select) => select.value);
    		let radios = Array.from(this.querySelectorAll('input[type="radio"]:checked'), (radio) => radio.value);

    		this.options = [...radios, ...selects];
  			}  
  	
  		updateMasterId() {
  			this.currentVariant = this.getVariantData().find((variant) => {
  				return !variant.options.map((option, index) => {
  					return this.options[index] === option;
  				}).includes(false);
  			});
  		}
  	
  		// updateMedia() {
  		//   if (!this.currentVariant) return;
  		//   if (!this.currentVariant.featured_media) return;
  	
  		//   const mediaGallery = document.getElementById(`MediaGallery-${this.dataset.section}`);
  		//   mediaGallery.setActiveMedia(`${this.dataset.section}-${this.currentVariant.featured_media.id}`, true);
  	
  		//   const modalContent = document.querySelector(`#ProductModal-${this.dataset.section} .product-media-modal__content`);
  		//   if (!modalContent) return;
  		//   const newMediaModal = modalContent.querySelector( `[data-media-id="${this.currentVariant.featured_media.id}"]`);
  		//   modalContent.prepend(newMediaModal);
  		// }
  	
  		updateURL() {
  			if (!this.currentVariant || this.dataset.updateUrl === 'false') return;
  			window.history.replaceState({ }, '', `${this.dataset.url}?variant=${this.currentVariant.id}`);
  		}
  	
  		updateShareUrl() {
  			const shareButton = document.getElementById(`Share-${this.dataset.section}`);
  			if (!shareButton || !shareButton.updateUrl) return;
  			shareButton.updateUrl(`${window.shopUrl}${this.dataset.url}?variant=${this.currentVariant.id}`);
  		}
  	
  		updateVariantInput() {
  			const productForms = document.querySelectorAll(`#product-form-${this.dataset.section}, #product-form-installment-${this.dataset.section}`);
  			productForms.forEach((productForm) => {
  				const input = productForm.querySelector('input[name="id"]');
  				input.value = this.currentVariant.id;
  				input.dispatchEvent(new Event('change', { bubbles: true }));
  			});
  		}
  	
  		updatePickupAvailability() {
  			const pickUpAvailability = document.querySelector('pickup-availability');
  			if (!pickUpAvailability) return;
  	
  			if (this.currentVariant && this.currentVariant.available) {
  				pickUpAvailability.fetchAvailability(this.currentVariant.id);
  			} else {
  				pickUpAvailability.removeAttribute('available');
  				pickUpAvailability.innerHTML = '';
  			}
  		}
  	
  		removeErrorMessage() {
  			const section = this.closest('section');
  			if (!section) return;
  	
  			const productForm = section.querySelector('product-form');
  			if (productForm) productForm.handleErrorMessage();
  		}
  	
  		renderProductInfo() {
  			fetch(`${this.dataset.url}?variant=${this.currentVariant.id}&section_id=${this.dataset.originalSection ? this.dataset.originalSection : this.dataset.section}`)
  				.then((response) => response.text())
  				.then((responseText) => {
  					const html = new DOMParser().parseFromString(responseText, 'text/html')
  					const destination = document.getElementById(`price-${this.dataset.section}`);
  					const source = html.getElementById(`price-${this.dataset.originalSection ? this.dataset.originalSection : this.dataset.section}`);
  					if (source && destination) destination.innerHTML = source.innerHTML;
  	
  					const price = document.getElementById(`price-${this.dataset.section}`);
  				});
  		}
  	
  		toggleAddButton(disable = true, text, modifyClass = true) {
  			const productForm = document.getElementById(`product-form-${this.dataset.section}`);
  			if (!productForm) return;
  			const addButton = productForm.querySelector('[name="add"]');
  			const addButtonText = productForm.querySelector('[name="add"] > span');
  			if (!addButton) return;
  	
  			if (disable) {
  				addButton.setAttribute('disabled', 'disabled');
  				if (text) addButtonText.textContent = text;
  			} else {
  				addButton.removeAttribute('disabled');
  				addButtonText.textContent = window.variantStrings.addToCart;
  			}
  	
  			if (!modifyClass) return;
  		}
  	
  		setUnavailable() {
  			const button = document.querySelector('.product-section__cart-button');
  			if (!this.currentVariant.available) {
  				button.innerText = "Wyprzedane";
  				button.setAttribute('disabled', '');
  			} else{
  					button.innerText = "Do koszyka";
  					button.removeAttribute('disabled', '');
  				}
  		}
  	
  		getVariantData() {
  			this.variantData = this.variantData || JSON.parse(this.querySelector('[type="application/json"]').textContent);  				
  			return this.variantData;
  		}
  	}
  		
  	customElements.define('variant-selects', VariantSelects);
  	
  	class VariantRadios extends VariantSelects {
  		constructor() {
  			super();
  		}
  	
  		updateOptions() {
  			super.updateOptions();
  		}
  	}
  	
  	customElements.define('variant-radios', VariantRadios);
</script>